#!/usr/bin/env python3
"""
Create Simple Video Placeholders for Orson Vision
Generates basic video files for missing video assets
"""

import os
import subprocess
import time
from pathlib import Path

# Video assets that need placeholders
VIDEO_ASSETS = {
    "assets/videos/cinematic-web-design.mp4": "Cinematic Web Design",
    "assets/videos/digital-marketing.mp4": "Digital Marketing",
    "assets/videos/mobile-app.mp4": "Mobile App Development",
    "assets/videos/testimonial-sarah.mp4": "Sarah Johnson Testimonial",
    "assets/videos/testimonial-michael.mp4": "Michael Chen Testimonial",
    "assets/videos/testimonial-emily.mp4": "Emily Rodriguez Testimonial",
}

def create_video_with_ffmpeg(dest_path, title):
    """Create a simple video using ffmpeg"""
    try:
        # Check if ffmpeg is available
        result = subprocess.run(['ffmpeg', '-version'], capture_output=True, text=True)
        if result.returncode != 0:
            print(f"  ‚ö†Ô∏è  FFmpeg not available, creating text placeholder")
            return create_text_video_placeholder(dest_path, title)

        # Create a simple video with text overlay
        temp_script = f"""
ffmpeg -f lavfi -i color=c=0x2d2d41:size=1920x1080:duration=10 -vf "drawtext=text='{title}':fontcolor=0xd4af37:fontsize=48:x=(w-text_w)/2:y=(h-text_h)/2,drawtext=text='Orson Vision':fontcolor=0x969696:fontsize=24:x=(w-text_w)/2:y=(h-text_h)/2+60" -c:v libx264 -preset ultrafast -crf 23 -y "{dest_path}"
"""

        # Run ffmpeg command
        result = subprocess.run(['ffmpeg', '-f', 'lavfi', '-i', f'color=c=0x2d2d41:size=1920x1080:duration=10',
                               '-vf', f'drawtext=text={title}:fontcolor=0xd4af37:fontsize=48:x=(w-text_w)/2:y=(h-text_h)/2,drawtext=text=Orson Vision:fontcolor=0x969696:fontsize=24:x=(w-text_w)/2:y=(h-text_h)/2+60',
                               '-c:v', 'libx264', '-preset', 'ultrafast', '-crf', '23', '-y', str(dest_path)],
                              capture_output=True, text=True)

        if result.returncode == 0:
            print(f"  ‚úÖ Created video with FFmpeg: {dest_path}")
            return True
        else:
            print(f"  ‚ùå FFmpeg failed: {result.stderr}")
            return create_text_video_placeholder(dest_path, title)

    except Exception as e:
        print(f"  ‚ùå FFmpeg error: {e}")
        return create_text_video_placeholder(dest_path, title)

def create_text_video_placeholder(dest_path, title):
    """Create a text file placeholder for video"""
    try:
        placeholder_file = dest_path.with_suffix('.txt')
        with open(placeholder_file, 'w') as f:
            f.write(f"Video Placeholder for: {title}\n")
            f.write(f"File: {dest_path}\n")
            f.write("Duration: 30 seconds\n")
            f.write("Resolution: 1920x1080\n")
            f.write("Format: MP4\n")
            f.write("Generated by Orson Vision Asset System\n")
            f.write("\nTo create actual video:\n")
            f.write("1. Use video editing software\n")
            f.write("2. Record screen capture\n")
            f.write("3. Use online video generators\n")
            f.write("4. Download from stock video sites\n")

        print(f"  ‚úÖ Created video placeholder: {placeholder_file}")
        return True

    except Exception as e:
        print(f"  ‚ùå Failed to create video placeholder: {e}")
        return False

def create_html5_video_placeholder(dest_path, title):
    """Create an HTML5 video placeholder"""
    try:
        html_file = dest_path.with_suffix('.html')
        with open(html_file, 'w') as f:
            f.write(f"""<!DOCTYPE html>
<html>
<head>
    <title>{title} - Video Placeholder</title>
    <style>
        body {{
            margin: 0;
            padding: 0;
            background: #2d2d41;
            color: #d4af37;
            font-family: Arial, sans-serif;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
        }}
        .video-placeholder {{
            width: 800px;
            height: 450px;
            background: linear-gradient(45deg, #2d2d41, #3a3a5a);
            border: 2px solid #d4af37;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            text-align: center;
        }}
        .title {{
            font-size: 24px;
            margin-bottom: 10px;
        }}
        .subtitle {{
            font-size: 16px;
            color: #969696;
        }}
        .play-button {{
            width: 80px;
            height: 80px;
            background: #d4af37;
            border-radius: 50%;
            display: flex;
            justify-content: center;
            align-items: center;
            margin: 20px 0;
            cursor: pointer;
        }}
        .play-button:hover {{
            background: #b8941f;
        }}
    </style>
</head>
<body>
    <div class="video-placeholder">
        <div class="play-button">‚ñ∂</div>
        <div class="title">{title}</div>
        <div class="subtitle">Orson Vision</div>
        <div class="subtitle">Video Placeholder</div>
    </div>
</body>
</html>""")

        print(f"  ‚úÖ Created HTML5 video placeholder: {html_file}")
        return True

    except Exception as e:
        print(f"  ‚ùå Failed to create HTML5 placeholder: {e}")
        return False

def main():
    print("="*80)
    print("üé¨ Creating Video Placeholders for Orson Vision")
    print("="*80)

    success_count = 0
    total_count = len(VIDEO_ASSETS)

    for video_path, title in VIDEO_ASSETS.items():
        print(f"\nüìÅ Video: {video_path}")
        print(f"üé¨ Creating placeholder for: {title}")

        # Create directory
        dest_path = Path(video_path)
        dest_path.parent.mkdir(parents=True, exist_ok=True)

        # Try to create video with FFmpeg first
        if create_video_with_ffmpeg(dest_path, title):
            success_count += 1
        else:
            # Fallback to HTML5 placeholder
            if create_html5_video_placeholder(dest_path, title):
                success_count += 1

        time.sleep(0.1)

    print(f"\nüéâ Video Placeholder Creation Summary:")
    print(f"‚úÖ Successful: {success_count}/{total_count}")
    print(f"‚ùå Failed: {total_count - success_count}/{total_count}")

    if success_count > 0:
        print(f"\nüìÅ Video placeholders created in: {Path.cwd()}")
        print("üîÑ You may need to restart your Next.js dev server to see the new assets")
        print("üí° Note: Some placeholders are HTML files that can be opened in a browser")

if __name__ == "__main__":
    main()
