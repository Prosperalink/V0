# Orson Vision - Cursor Project Rules

## Documentation Organization Rule

### üìã Mandatory Rule: Documentation Storage

**All documentation (guidelines, reports, implementation plans, etc.) must be stored inside the `docs/` folder in the appropriate section.**

### üìÅ Required Structure

```
docs/
‚îú‚îÄ‚îÄ technical/           # Development guidelines, technical specifications, API docs
‚îú‚îÄ‚îÄ project/            # Project plans, roadmaps, implementation summaries
‚îú‚îÄ‚îÄ ux-ui/             # Design guidelines, UI/UX specifications
‚îú‚îÄ‚îÄ copywriting/        # Content guidelines, brand voice, copy standards
‚îú‚îÄ‚îÄ brand/             # Brand identity, visual guidelines, assets
‚îú‚îÄ‚îÄ assets/            # Asset management, media guidelines
‚îî‚îÄ‚îÄ README.md          # Documentation organization guide
```

### ‚úÖ Compliance Requirements

#### File Placement Rules
- **Technical Documentation**: Must be in `docs/technical/`
- **Project Documentation**: Must be in `docs/project/`
- **UX/UI Documentation**: Must be in `docs/ux-ui/`
- **Copywriting Documentation**: Must be in `docs/copywriting/`
- **Brand Documentation**: Must be in `docs/brand/`
- **Asset Documentation**: Must be in `docs/assets/`

#### File Naming Standards
- Use kebab-case for all documentation files (e.g., `development-environment-guidelines.md`)
- Include descriptive names that indicate content
- Follow consistent naming patterns within categories

#### Content Standards
- Include clear titles and descriptions
- Use consistent heading hierarchy (H1, H2, H3)
- Include last updated date and version information
- Follow markdown formatting standards

### üö´ Prohibited Actions

- **No documentation in root directory**: All docs must be in `docs/` folder
- **No loose files**: All documentation must be properly categorized
- **No inconsistent naming**: Follow established naming conventions
- **No outdated documentation**: Keep documentation current and accurate

### üîÑ Enforcement Guidelines

#### When Creating New Documentation
1. **Identify Category**: Choose appropriate folder in `docs/`
2. **Create File**: Use kebab-case naming convention
3. **Follow Template**: Use consistent documentation structure
4. **Add to Index**: Update relevant documentation indexes
5. **Review**: Have documentation reviewed by team

#### When Moving Existing Documentation
1. **Move Files**: Relocate any documentation in root to appropriate `docs/` folder
2. **Update References**: Update any links or references to moved files
3. **Verify Structure**: Ensure proper categorization
4. **Communicate**: Notify team of documentation reorganization

### üìö Documentation Categories

#### Technical Documentation (`docs/technical/`)
- Development Environment Guidelines
- API Documentation
- Deployment Guide
- Troubleshooting
- Performance Guidelines
- Security Guidelines

#### Project Documentation (`docs/project/`)
- Implementation Plans
- Optimization Summaries
- Roadmaps
- Milestones
- Status Reports
- Meeting Notes

#### UX/UI Documentation (`docs/ux-ui/`)
- Design System
- UI Guidelines
- Accessibility Guidelines
- Responsive Design
- User Experience
- Prototyping

#### Copywriting Documentation (`docs/copywriting/`)
- Brand Voice
- Content Guidelines
- SEO Strategy
- Multilingual Content
- Content Calendar
- Copy Templates

#### Brand Documentation (`docs/brand/`)
- Brand Identity
- Visual Guidelines
- Logo Usage
- Color Palette
- Marketing Materials
- Brand Evolution

#### Asset Documentation (`docs/assets/`)
- Asset Management
- Image Guidelines
- Video Standards
- File Naming Conventions
- Asset Workflow
- Storage Guidelines

### üéØ Code Quality Standards

#### Naming Conventions
- **React Components**: PascalCase (e.g., `MyComponent`)
- **Functions**: camelCase (e.g., `handleClick`)
- **Interfaces**: PascalCase with 'I' prefix (e.g., `IComponentProps`)
- **Constants**: UPPER_CASE (e.g., `API_ENDPOINTS`)

#### Import Organization
```typescript
// Built-in modules
import React from 'react';
import { useState } from 'react';

// External libraries
import { motion } from 'framer-motion';
import { Button } from '@headlessui/react';

// Internal modules
import { AnimationObserver } from '@/components/AnimationObserver';
import { formatDate } from '@/utils/date';
```

### üìù Documentation Standards

#### File Naming
- Use kebab-case for file names (e.g., `development-environment-guidelines.md`)
- Include descriptive names that indicate content
- Use consistent naming patterns within categories

#### Content Structure
- Start with a clear title and description
- Include table of contents for longer documents
- Use consistent heading hierarchy (H1, H2, H3)
- Include last updated date and version information

#### Markdown Formatting
- Use proper markdown syntax
- Include code blocks with language specification
- Use tables for structured data
- Include links to related documentation

### üîß Development Environment

#### Essential Commands
```bash
# Development
npm run dev              # Start development server
npm run dev:fast         # Start with optimized settings
npm run dev:debug        # Start with debugging enabled

# Quality Checks
npm run standards        # Run all quality checks
npm run lint:fix         # Fix linting issues
npm run format           # Format all files
npm run type-check       # TypeScript checking

# Testing
npm run test             # Run tests once
npm run test:watch       # Run tests in watch mode
npm run test:coverage    # Generate coverage report

# Performance
npm run performance      # Performance measurement
npm run analyze          # Bundle analysis
npm run clean            # Clear build cache
```

### üéØ Project Goals

#### Organization
- Clear categorization of documentation
- Easy navigation and discovery
- Consistent structure across project
- Scalable documentation system

#### Maintenance
- Simplified documentation management
- Clear ownership and responsibilities
- Regular review and update processes
- Version control and tracking

#### Collaboration
- Shared understanding of documentation structure
- Consistent standards across team
- Easy onboarding for new team members
- Clear communication channels

### üìà Success Metrics

#### Compliance
- 100% documentation in `docs/` folder
- 0 documentation files in root directory
- Consistent naming conventions across all files
- Proper categorization of all documentation

#### Quality
- Regular documentation reviews completed
- Up-to-date documentation across all categories
- Clear and accessible documentation structure
- Team adoption of documentation standards

#### Efficiency
- Reduced time to find documentation
- Improved documentation maintenance
- Streamlined onboarding process
- Enhanced collaboration effectiveness

---

*Rule Established: December 2024*
*Version: 1.0*
*Status: Active*
*Enforcement: Required for all project participants*
